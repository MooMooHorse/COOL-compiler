

#include "UnitLoopInfo.h"

#include <stack>

using namespace llvm;
using namespace cs426;

void UnitLoopInfo::addLoop(BasicBlock *header, const std::set<BasicBlock *> &blocks, DominatorTree &DT) {
    if (this->Loops.find(header) == Loops.end()) { // Loop isn't stored
        std::set<BasicBlock *> exitBlocks;
        for (auto *BB : blocks) {
            for (auto *Succ : successors(BB)) {
                if (blocks.find(Succ) == blocks.end()) {
                    exitBlocks.insert(Succ);
                }
            }
        }

        // Compute the preheader
        BasicBlock *preheader = nullptr;
        for (auto *Pred : predecessors(header)) {
            if (blocks.find(Pred) == blocks.end()) {
                if (preheader) {
                    // Multiple predecessors outside the loop; cannot determine preheader
                    preheader = nullptr;
                    break;
                } else {
                    preheader = Pred;
                }
            }
        }

        this->Loops[header] = {
            header,
            preheader,
            blocks,
            exitBlocks
        };
    }
}

const std::map<BasicBlock *, UnitLoopInfo::Loop> & UnitLoopInfo::getLoops() const {
	return this->Loops;
}

const UnitLoopInfo::Loop *UnitLoopInfo::getLoopForHeader(BasicBlock *header) {
	if(this->Loops.find(header) == this->Loops.end()) {
		return nullptr;
	} 
	return &(this->Loops[header]);
}

/**
 * print_loop and printBasicBlockInstructions is Generated by GPT-4
 * Prompt: 
	 	how to iterate through a map (Loops in this example)

		class UnitLoopInfo {
		public:
		struct Loop {
			BasicBlock *Header;                 // The header of the loop
			std::set<BasicBlock *> blocks;      // All blocks that belong to the loop
			std::set<BasicBlock *> exitBlocks;  // blocks that exit the loop
		};

		private:
		// Map from header blocks to their corresponding Loop info
		std::map<BasicBlock *, Loop> Loops;

		public:
		// Add a loop to the UnitLoopInfo
		void addLoop(BasicBlock *Header, const std::set<BasicBlock *> &blocks);

		// Get all loops
		const std::map<BasicBlock *, Loop> &getLoops() const;

		// Get a specific loop given a header
		const Loop *getLoopForHeader(BasicBlock *Header);

		void print_loop(std::ostream* ct);

		};


		is there a way to print basic blocks (human readble) that composes a loop? 

		Can your provided print do this?

		Will it print out instructions associated to each block? Can we achieve this?

		Can we abstract out the print block instruction function?
 */



void printBasicBlockInstructions(const BasicBlock *block, std::ostream *ct) {
    if (!block || !ct) return; // Check for null pointers

    *ct << "    Block: ";
    if (block->getName().empty()) {
        *ct << "(unnamed block)";
    } else {
        *ct << block->getName().str();
    }
    *ct << "\n";

    // Print instructions in the block
    *ct << "      Instructions:\n";
    for (const auto &inst : *block) {
        std::string instStr;
        llvm::raw_string_ostream rso(instStr);
        inst.print(rso); // Print the instruction to the string
        *ct << "        " << rso.str() << "\n";
    }
}

void UnitLoopInfo::printLoops(std::ostream *ct) {
    if (!ct) return; // Check for null pointer

    for (const auto &loopEntry : Loops) {
        BasicBlock *header = loopEntry.first;
        const Loop &loop = loopEntry.second;

        // Print header
        *ct << "Loop Header: " << (header->hasName() ? header->getName().str() : "(unnamed)") << "\n";

        // Print preheader
        if (loop.preheader) {
            *ct << "  Preheader: " << (loop.preheader->hasName() ? loop.preheader->getName().str() : "(unnamed)") << "\n";
        } else {
            *ct << "  Preheader: None\n";
        }

        // Print all blocks in the loop
        *ct << "  Blocks in the loop:\n";
        for (const auto &block : loop.blocks) {
            printBasicBlockInstructions(block, ct);
        }

        // Print exit blocks
        *ct << "  Exit blocks:\n";
        for (const auto &exitBlock : loop.exitBlocks) {
            printBasicBlockInstructions(exitBlock, ct);
        }
    }
}



/// Main function for running the Loop Identification analysis. This function
/// returns information about the loops in the function via the UnitLoopInfo
/// object
UnitLoopInfo UnitLoopAnalysis::run(Function &F, FunctionAnalysisManager &FAM)
{
	dbgs() << "UnitLoopAnalysis running on " << F.getName() << "\n";
	// Acquires the Dominator Tree constructed by LLVM for this function. You may
	// find this useful in identifying the natural loops
	DominatorTree &DT = FAM.getResult<DominatorTreeAnalysis>(F);

	UnitLoopInfo Loops;
	// Fill in appropriate information

	dbgs() << "All blocks in the function:\n";

	for (auto &BB : F) {
		printBasicBlockInstructions(&BB, &std::cerr);
	}

	// Iterate through all blocks to find back edges
	for (auto &BB : F) {
		for (auto *Succ : successors(&BB)) {
			// Check if it's a back edge (Successor dominates its Predecessor)
			if (DT.dominates(Succ, &BB)) {
				dbgs() << "Found back edge from " << BB.getName() << " to " << Succ->getName() << "\n";
				std::set<BasicBlock *> loopBlocks;
				collectLoopBlocks(Succ, &BB, loopBlocks);
				Loops.addLoop(Succ, loopBlocks, DT);
			}
		}
	}

	Loops.printLoops(&std::cerr);

	return Loops;
}

void UnitLoopAnalysis::dfs(BasicBlock* current, std::set<BasicBlock *> & loopBlocks, BasicBlock* header) {
	if (loopBlocks.insert(current).second) { // Only proceed if current is newly inserted
		for (auto *Pred : predecessors(current)) {
			if (Pred != header && !loopBlocks.count(Pred)) {
				dfs(Pred, loopBlocks, header);
			}
		}
	}
}

/// Helper function to collect blocks in a loop using DFS.
void UnitLoopAnalysis::collectLoopBlocks(BasicBlock *header, BasicBlock *tail, std::set<BasicBlock *> &loopBlocks) {
	dfs(tail, loopBlocks, header);
	loopBlocks.insert(header);
}

AnalysisKey UnitLoopAnalysis::Key;

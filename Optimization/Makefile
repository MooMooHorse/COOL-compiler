# Makefile (completely generated by Github Copilot)

# Tools
CLANG = clang-15
OPT = opt-15
CMAKE = cmake
MAKE = make

# Build directory and plugin path
BUILD_DIR = build
TEST_DIR = tests/testing
PLUGIN = $(BUILD_DIR)/libUnitProject.so

# Compiler and optimization options
CXXFLAGS = -c -O0 -Xclang -disable-O0-optnone -emit-llvm -S
OPT_PASSES = function(mem2reg,instcombine,simplifycfg,adce),inline,globaldce,function(sroa,early-cse,unit-sccp,jump-threading,correlated-propagation,simplifycfg,instcombine,simplifycfg,reassociate,unit-licm,adce,simplifycfg,instcombine),globaldce
LICM_PASS_OPT = unit-licm
SCCP_PASS_OPT = unit-sccp
CSE_PASS_OPT = unit-cse

# Default output
OUTPUT = $(PROGRAM)

REAL_PROG = $(TEST_DIR)/$(PROGRAM)

# Build the shared library and optimize
all: $(PLUGIN)

$(PLUGIN):
	mkdir -p $(BUILD_DIR)
	cd $(BUILD_DIR) && $(CMAKE) ../ && $(MAKE) -j

optimize: $(PLUGIN) # optimize using human-readable LLVM IR
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(OPT_PASSES)" -S $(TEST_DIR)/$(PROGRAM).ll -o result.ll # current version


optimize-licm: $(PLUGIN) # optimize using human-readable LLVM IR
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(LICM_PASS_OPT)" -S $(TEST_DIR)/$(PROGRAM).ll -o result.ll # current version

optimize-sccp: $(PLUGIN) # optimize using human-readable LLVM IR
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(SCCP_PASS_OPT)" -S $(TEST_DIR)/$(PROGRAM).ll -o result.ll # current version

optimize-cse: $(PLUGIN) # optimize using human-readable LLVM IR
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(CSE_PASS_OPT)" -S $(TEST_DIR)/$(PROGRAM).ll -o result.ll # current version


optimize-real: # optimize using real C++ file
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(CLANG) $(REAL_PROG).c $(CXXFLAGS) -o - | \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(OPT_PASSES)" -S  -o result.ll


optimize-real-licm: # optimize using real C++ file
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(CLANG) $(REAL_PROG).c $(CXXFLAGS) -o - | \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(LICM_PASS_OPT)" -S  -o result.ll

optimize-real-sccp: # optimize using real C++ file
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(CLANG) $(REAL_PROG).c $(CXXFLAGS) -o - | \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(SCCP_PASS_OPT)" -S  -o result.ll

optimize-real-cse: # optimize using real C++ file
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(CLANG) $(REAL_PROG).c $(CXXFLAGS) -o - | \
	$(OPT) -verify-machineinstrs -load-pass-plugin=$(PLUGIN) -passes="$(CSE_PASS_OPT)" -S  -o result.ll


no-optimize: # no optimization
	@if [ "$(PROGRAM)" = "" ]; then \
		echo "Error: Specify the <program> parameter"; \
		exit 1; \
	fi
	@if [ "$(OUTPUT)" = "" ]; then \
		OUTPUT=$(PROGRAM); \
	fi; \
	$(CLANG) $(TEST_DIR)/$(PROGRAM).ll -o result.ll

run:
	$(CLANG) result.ll -o result \
	&& ./result > output.txt

clean:
	rm -rf $(BUILD_DIR) $(OUTPUT)

.PHONY: all clean optimize